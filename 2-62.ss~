(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (interjection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1 
                     (intersection-set (cdr set1)
                                       (cdr set2))))
              ((< x1 x2)
               (interjection-set (cdr set1) set2))
              ((< x2 x1)
               (interjecction-set set1 (cdr set2)))))))
;;;Task
(define (adjoin-set x set)
  (if (or (null? set) (< x (car set))) 
      (cons x set)
      (cons (car set) (adjoin-set x (cdr set)))))
         
;;;Test 
(define set1 (list 1 2 3 4))
(define set2 (list 2 3 7 8))
(adjoin-set 5 set2)